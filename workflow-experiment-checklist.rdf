<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rdf:RDF [
    <!ENTITY rdf     "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY rdfs    "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY owl     "http://www.w3.org/2002/07/owl#" >
    <!ENTITY xsd     "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY xml     "http://www.w3.org/XML/1998/namespace" >
    <!ENTITY rdfg    "http://www.w3.org/2004/03/trix/rdfg-1/" >
    <!ENTITY ore     "http://www.openarchives.org/ore/terms/" >
    <!ENTITY ao      "http://purl.org/ao/" >
    <!ENTITY dcterms "http://purl.org/dc/terms/" >
    <!ENTITY foaf    "http://xmlns.com/foaf/0.1/" >
    <!ENTITY ro      "http://purl.org/wf4ever/ro#" >
    <!ENTITY wfprov  "http://purl.org/wf4ever/wfprov#" >
    <!ENTITY wfdesc  "http://purl.org/wf4ever/wfdesc#" >
    <!ENTITY wf4ever "http://purl.org/wf4ever/wf4ever#" >
    <!ENTITY minim   "http://purl.org/minim/minim#" >
]>

<rdf:RDF xmlns="."
     xmlns:rdf="&rdf;"
     xmlns:rdfs="&rdfs;"
     xmlns:owl="&owl;"
     xmlns:xsd="&xsd;"
     xmlns:xml="&xml;"
     xmlns:rdfg="&rdfg;"
     xmlns:ore="&ore;"
     xmlns:ao="&ao;"
     xmlns:dcterms="&dcterms;"
     xmlns:foaf="&foaf;"
     xmlns:ro="&ro;"
     xmlns:wfprov="&wfprov;"
     xmlns:wfdesc="&wfdesc;"
     xmlns:wf4ever="&wf4ever;"
     xmlns:minim="&minim;"
>

  <!-- ===========
       CONSTRAINTS 
       ===========
    -->

  <!-- Target for Minimum information requirement 

       Minim invokes minimum information models on for a specified purpose
       relating to a specified target.  The requirement may apply to some
       resource other than the specified target.
    -->

  <rdf:Description rdf:about="http://workflow-experiment#ChecklistConstraints">

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#experiment-complete">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>ready-to-release</minim:forPurpose>
        <minim:toModel rdf:resource="#experiment_complete_model" />
        <!-- <minim:onResourceTemplate>{+targetro}</minim:onResourceTemplate> -->
        <rdfs:comment>
          Constraint to be satisfied if the target RO is to be considered a
          complete and fully-described workflow experiment.
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#wf-accessible">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>wf-accessible</minim:forPurpose>
        <minim:toModel rdf:resource="#wf_accessible_model" />
        <rdfs:comment>
          Constraint to test workflow accessible item in isolation
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>

  </rdf:Description>

  <!-- ======
       MODELS
       ======
    -->

  <!-- Model (checklist) for complete experiment RO
    -->
  <minim:Model rdf:about="#experiment_complete_model">
    <rdfs:label>Complete experiment</rdfs:label>
    <rdfs:comment>
      This model defines information that must be satisfied by the target RO
      for the target RO to be considered a complete and fully-described 
      workflow experiment.
    </rdfs:comment>
    <minim:hasShouldRequirement rdf:resource="#RO_has_hypothesys" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_sketch" />
    <!--
    <minim:hasShouldRequirement rdf:resource="#RO_has_sample_input" />
    -->
    <!--
    <minim:hasMustRequirement   rdf:resource="#RO_has_workflow" />
    <minim:hasMustRequirement   rdf:resource="#WF_has_label" />
    <minim:hasMayRequirement   rdf:resource="#WF_has_title" />
    <minim:hasMayRequirement   rdf:resource="#WF_has_description" />
    -->
    <!--
    <minim:hasMustRequirement   rdf:resource="#WF_has_definition" />
    -->
    <minim:hasMustRequirement   rdf:resource="#WF_accessible" />
    <minim:hasMustRequirement   rdf:resource="#WF_services_accessible" />
    <!--
    -->
    <minim:hasMustRequirement   rdf:resource="#RO_has_inputdata" />
    <!--
    <minim:hasMustRequirement   rdf:resource="#WF_has_input" />
    <minim:hasMayRequirement   rdf:resource="#WF_has_input_label" />
    <minim:hasMustRequirement   rdf:resource="#WF_inputs_agregated" />
    <minim:hasMustRequirement   rdf:resource="#WF_inputs_accessible" />
    -->
    <!--
    <minim:hasShouldRequirement rdf:resource="#WF_has_output" />
    <minim:hasMustRequirement   rdf:resource="#WF_has_output_label" />
    <minim:hasMustRequirement   rdf:resource="#WF_outputs_agregated" />
    <minim:hasShouldRequirement rdf:resource="#WF_outputs_accessible" />
    -->
    <!--
    <minim:hasShouldRequirement rdf:resource="#RO_has_result_presentation" />
    -->
    <minim:hasShouldRequirement rdf:resource="#RO_has_conclusion" />
    <!--
    <minim:hasMayRequirement rdf:resource="#RO_has_annotations" />
    <minim:hasMayRequirement rdf:resource="#RO_live_annotations" />
    -->
  </minim:Model>

  <!-- Model (checklist) for WF accessible
    -->
  <minim:Model rdf:about="#wf_accessible_model">
    <rdfs:label>Workflow accessible</rdfs:label>
    <rdfs:comment>
      Model to test workflow accessible item in isolation
    </rdfs:comment>
    <minim:hasMustRequirement rdf:resource="#WF_accessible" />
  </minim:Model>

  <!-- =================
       REQUIREMENT RULES
       =================
    -->

  <!-- Hypothesis is present -->
  <minim:Requirement rdf:about="#RO_has_hypothesys">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          ?hypothesis rdf:type roterms:Hypothesis .
        </minim:exists>
        <minim:showpass>Experiment hypothesis is present</minim:showpass>
        <minim:showfail>Experiment hypothesis is not present</minim:showfail>
        <minim:derives rdf:resource="#RO_has_hypothesys" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>010</minim:seq>
  </minim:Requirement>

  <!-- Workflow sketch is present -->
  <minim:Requirement rdf:about="#RO_has_sketch">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          ?sketch rdf:type roterms:Sketch .
        </minim:exists>
        <minim:showpass>Workflow design sketch is present</minim:showpass>
        <minim:showfail>Workflow design sketch is not present</minim:showfail>
        <minim:derives rdf:resource="#RO_has_sketch" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>011</minim:seq>
  </minim:Requirement>

  <!-- Sample input is indicated (useful for repair)
  <minim:Requirement rdf:about="#RO_has_sample_input">
    :
  </minim:Requirement>
  -->

  <!--
        Workflow
  -->

  <!-- Workflow instance description is present -->
  <minim:Requirement rdf:about="#RO_has_workflow">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          ?workflow rdf:type wfdesc:Workflow .
        </minim:exists>
        <minim:showpass>Workflow is present</minim:showpass>
        <minim:showfail>Workflow is not present.</minim:showfail>
        <minim:derives rdf:resource="#RO_has_workflow" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>021</minim:seq>
  </minim:Requirement>

  <!-- Workflow label is present -->
  <minim:Requirement rdf:about="#WF_has_label">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              wfdesc:hasWorkflowDefinition ?wfdef .
        </minim:forall>
        <minim:exists>
          ?wf rdfs:label ?wflab .
        </minim:exists>
        <minim:showpass>All workflow labels are present</minim:showpass>
        <minim:showfail>Workflow label for %(wfdef)s is not present</minim:showfail>
        <minim:derives rdf:resource="#WF_has_label" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>023</minim:seq>
  </minim:Requirement>

  <!-- Workflow title is present -->
  <minim:Requirement rdf:about="#WF_has_title">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab .
        </minim:forall>
        <minim:exists>
          ?wf dcterms:title ?wftitle .
        </minim:exists>
        <minim:showpass>All workflow titles are present</minim:showpass>
        <minim:showfail>Workflow title for &lt;i&gt;%(wflab)s &lt;/i&gt; is not present</minim:showfail>
        <minim:derives rdf:resource="#WF_has_title" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>024</minim:seq>
  </minim:Requirement>

  <!-- Workflow description is present -->
  <minim:Requirement rdf:about="#WF_has_description">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab .
        </minim:forall>
        <minim:exists>
          ?wf dcterms:description ?wfdescr .
        </minim:exists>
        <minim:showpass>Descriptive metadata are present for all workflows</minim:showpass>
        <minim:showfail>Description metadata for &lt;i&gt;%(wflab)s &lt;/i&gt; is not present</minim:showfail>
        <minim:derives rdf:resource="#WF_has_description" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>025</minim:seq>
  </minim:Requirement>

  <!-- Workflow definition is present -->
  <minim:Requirement rdf:about="#WF_has_definition">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab .
        </minim:forall>
        <minim:exists>
          ?wf wfdesc:hasWorkflowDefinition ?wfdef .
        </minim:exists>
        <minim:showpass>Workflow definition are specified for all workflows</minim:showpass>
        <minim:showfail>No workflow definition is specified for &lt;i&gt;%(wflab)s &lt;/i&gt;</minim:showfail>
        <minim:showmiss>No workflows are described</minim:showmiss>
        <minim:derives rdf:resource="#WF_has_definition" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>026</minim:seq>
  </minim:Requirement>

  <!-- Workflow definition is accessible (live) -->
  <minim:Requirement rdf:about="#WF_accessible">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab ;
              wfdesc:hasWorkflowDefinition ?wfdef .
        </minim:forall>
        <minim:isLiveTemplate>
          {+wfdef}
        </minim:isLiveTemplate>
        <minim:showpass>All workflow definitions are accessible</minim:showpass>
        <minim:showfail>The definition for workflow &lt;i&gt;%(wflab)s &lt;/i&gt; is not accessible</minim:showfail>
        <minim:showmiss>No workflow definitions are present</minim:showmiss>
        <minim:derives rdf:resource="#WF_accessible" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>027</minim:seq>
  </minim:Requirement>

  <!--
        Workflow services used
  -->

  <!-- All workflow services are accessible -->
  <minim:Requirement rdf:about="#WF_services_accessible">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?pr rdf:type wfdesc:Process ;
              rdfs:label ?prlab .
            {
            ?pr wf4ever:serviceURI ?pruri .
            }
          UNION
            {
            ?pr wf4ever:wsdlURI ?pruri .
            }
        </minim:forall>
        <minim:orderby>ORDER BY ?prlab</minim:orderby>
        <minim:isLiveTemplate>
          {+pruri}
        </minim:isLiveTemplate>
        <minim:showpass>All web services used by workflows are accessible</minim:showpass>
        <minim:showfail___>Web service &lt;a href="%(pruri)s"&gt;&lt;i&gt;%(prlab)s&lt;/i&gt;&lt;/a&gt; is not accessible</minim:showfail___>
        <minim:showfail>One or more web services used by one of the workflows are inaccessible, including &lt;a href="%(pruri)s"&gt;&lt;i&gt;%(prlab)s&lt;/i&gt;&lt;/a&gt;</minim:showfail>
        <minim:showmiss___>No workflow services are referenced</minim:showmiss___>
        <minim:derives rdf:resource="#WF_services_accessible" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>028</minim:seq>
  </minim:Requirement>

  <!--
        Workflow inputs
  -->

  <!-- Workflow input data is present -->
  <minim:Requirement rdf:about="#RO_has_inputdata">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          ?wfbundle roterms:inputSelected ?inputdata .
        </minim:exists>
        <minim:showpass>Input data is present</minim:showpass>
        <minim:showfail>Input data is not present</minim:showfail>
        <minim:derives rdf:resource="#RO_has_inputdata" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>030</minim:seq>
  </minim:Requirement>

  <!-- All workflow inputs are defined -->
  <minim:Requirement rdf:about="#WF_has_input">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab .
        </minim:forall>
        <minim:exists>
          <!-- ?wf wfdesc:hasInput [ wfdesc:hasArtifact ?if ] . -->
          ?wf wfdesc:hasInput ?wfinp .
        </minim:exists>
        <minim:showpass>Workflow inputs are described</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s&lt;/i&gt; has no inputs described</minim:showfail>
        <minim:derives rdf:resource="#WF_has_input" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>031</minim:seq>
  </minim:Requirement>

  <!-- All workflow inputs are labelled -->
  <minim:Requirement rdf:about="#WF_has_input_label">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab ;
              wfdesc:hasInput ?ifdesc .
        </minim:forall>
        <minim:exists>
          ?ifdesc rdfs:label ?iflab .
        </minim:exists>
        <minim:showpass>Workflow inputs are labelled</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s &lt;/i&gt; input %(if)s is not labelled</minim:showfail>
        <minim:derives rdf:resource="#WF_has_input" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>032</minim:seq>
  </minim:Requirement>

  <!-- All workflow inputs are aggregated -->
  <minim:Requirement rdf:about="#WF_inputs_agregated">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab ;
              wfdesc:hasInput ?ifdesc .
          ?ifdesc rdfs:label ?iflab ;
              wfdesc:hasArtifact ?if .
        </minim:forall>
        <minim:aggregatesTemplate>
          {+if}
        </minim:aggregatesTemplate>
        <minim:showpass>Workflow inputs are aggregated</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s &lt;/i&gt; input &lt;i&gt;%(iflab)s &lt;/i&gt; is not aggregated</minim:showfail>
        <minim:derives rdf:resource="#WF_inputs_agregated" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>033</minim:seq>
  </minim:Requirement>

  <!-- All workflow inputs are accessible -->
  <minim:Requirement rdf:about="#WF_inputs_accessible">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab ;
              wfdesc:hasInput ?ifdesc .
          ?ifdesc rdfs:label ?iflab ;
              wfdesc:hasArtifact ?if .
        </minim:forall>
        <minim:isLiveTemplate>
          {+if}
        </minim:isLiveTemplate>
        <minim:showpass>Workflow inputs are all accessible</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s &lt;/i&gt; input &lt;i&gt;%(iflab)s &lt;/i&gt; is not accessible</minim:showfail>
        <minim:derives rdf:resource="#WF_inputs_accessible" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>034</minim:seq>
  </minim:Requirement>

  <!--
        Workflow outputs
  -->

  <!-- All workflow outputs are defined -->
  <minim:Requirement rdf:about="#WF_has_output">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab .
        </minim:forall>
        <minim:exists>
          ?wf wfdesc:hasoutput [ wfdesc:hasArtifact ?of ] .
        </minim:exists>
        <minim:showpass>Workflow outputs are described</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s &lt;/i&gt; has no outputs specified</minim:showfail>
        <minim:derives rdf:resource="#WF_has_output" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>041</minim:seq>
  </minim:Requirement>

  <!-- All workflow outputs are labelled -->
  <minim:Requirement rdf:about="#WF_has_output_label">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab ;
              wfdesc:hasoutput ?ofdesc .
        </minim:forall>
        <minim:exists>
          ?ofdesc rdfs:label ?oflab .
        </minim:exists>
        <minim:showpass>Workflow outputs are labelled</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s &lt;/i&gt; output %(of)s is not labelled</minim:showfail>
        <minim:derives rdf:resource="#WF_has_output_label" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>042</minim:seq>
  </minim:Requirement>

  <!-- All workflow outputs are aggregated -->
  <minim:Requirement rdf:about="#WF_outputs_aggregated">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab ;
              wfdesc:hasOutput ?ofdesc .
          ?ofdesc rdfs:label ?oflab ;
              wfdesc:hasArtifact ?of .
        </minim:forall>
        <minim:aggregatesTemplate>
          {+of}
        </minim:aggregatesTemplate>
        <minim:showpass>Workflow outputs are described and aggregated</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s &lt;/i&gt; output &lt;i&gt;%(oflab)s &lt;/i&gt; is not aggregated</minim:showfail>
        <minim:derives rdf:resource="#WF_outputs_aggregated" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>043</minim:seq>
  </minim:Requirement>

  <!-- All workflow outputs are accessible -->
  <minim:Requirement rdf:about="#WF_outputs_accessible">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?wf rdf:type wfdesc:Workflow ;
              rdfs:label ?wflab ;
              wfdesc:hasOutput ?ofdesc .
          ?ofdesc rdfs:label ?oflab ;
              wfdesc:hasArtifact ?of .
        </minim:forall>
        <minim:isLiveTemplate>
          {+if}
        </minim:isLiveTemplate>
        <minim:showpass>Workflow outputs are all accessible</minim:showpass>
        <minim:showfail>Workflow &lt;i&gt;%(wflab)s &lt;/i&gt; output &lt;i&gt;%(oflab)s &lt;/i&gt; is not accessible</minim:showfail>
        <minim:derives rdf:resource="#WF_outputs_accessible" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>044</minim:seq>
  </minim:Requirement>

  <!--
        Experiment results, conclusions, etc
  -->

  <!-- RO has presentation of results (e.g. figure, etc.) -->
  <minim:Requirement rdf:about="#RO_has_result_presentation">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          ?sketch rdf:type roterms:ResultsPresentation .
        </minim:exists>
        <minim:showpass>Workflow results figure is present</minim:showpass>
        <minim:showfail>Workflow results figure is not present</minim:showfail>
        <minim:derives rdf:resource="#RO_has_result_presentation" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>061</minim:seq>
  </minim:Requirement>

  <!-- RO has conclusion -->
  <minim:Requirement rdf:about="#RO_has_conclusion">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          ?sketch rdf:type roterms:Conclusions .
        </minim:exists>
        <minim:showpass>Experiment conclusions are present</minim:showpass>
        <minim:showfail>Experiment conclusions are not present</minim:showfail>
        <minim:derives rdf:resource="#RO_has_conclusion" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>062</minim:seq>
  </minim:Requirement>

  <!--
        Other diagnostics
  -->

  <!-- RO annotations present -->
  <minim:Requirement rdf:about="#RO_has_annotations">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          ?astub rdf:type ro:AggregatedAnnotation .
        </minim:exists>
        <minim:showpass>Annotations are present</minim:showpass>
        <minim:showfail>Annotations are not present</minim:showfail>
        <minim:derives rdf:resource="#RO_has_annotations" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>101</minim:seq>
  </minim:Requirement>

  <!-- RO annotations present -->
  <minim:Requirement rdf:about="#RO_live_annotations">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?astub rdf:type ro:AggregatedAnnotation ;
            ao:body ?abody .
        </minim:forall>
        <minim:isLiveTemplate>
          {+abody}
        </minim:isLiveTemplate>
        <minim:showpass>Annotations bodies are all accessible</minim:showpass>
        <minim:showfail>Annotation body %(abody)s for %(astub)s is not accessible</minim:showfail>
        <minim:derives rdf:resource="#RO_live_annotations" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>102</minim:seq>
  </minim:Requirement>

</rdf:RDF>
